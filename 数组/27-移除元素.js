// 给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

// 不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

// 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

//  

// 说明:

// 为什么返回数值是整数，但输出的答案是数组呢?

// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

// 你可以想象内部操作如下:

// // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
// int len = removeElement(nums, val);

// // 在函数里修改输入数组对于调用者是可见的。
// // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
// for (int i = 0; i < len; i++) {
//     print(nums[i]);
// }
//  

// 示例 1：

// 输入：nums = [3,2,2,3], val = 3
// 输出：2, nums = [2,2]
// 解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。
// 示例 2：

// 输入：nums = [0,1,2,2,3,0,4,2], val = 2
// 输出：5, nums = [0,1,4,0,3]
// 解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。


// 原理
// 1. 定义变量len代表数组的索引
// 2. 从0开始遍历循环，当遍历的当前元素等于要被移除的元素，就把最后一个元素覆盖掉当前的元素，相当于把要移除的元素从数组中删除了，同时把数组的索引len往前移动一个，因为数组少了一个
// 3. 当遍历的当前元素不等于要被移除的元素，继续向前遍历，执行i++
// 4. 最后当i不小于len的时候，左右指针遍历完所有元素，此时len指向的就是数组删除val最后的元素个数
function removeVal(arr, val){
    let len = arr.length;
    for(let i = 0;i<len;){
        if(arr[i] === val){
            arr[i] = arr[len-1]
            console.log('arr',arr)
            len--
        }else{
            i++
        }
    }
    return len;
}
const arr = [3,2,2,3];
console.log(removeVal(arr,3))