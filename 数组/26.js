// 26. 删除有序数组中的重复项
// 给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。

// 由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。

// 将最终结果插入 nums 的前 k 个位置后返回 k 。

// 不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

// 判题标准:

// 系统会用下面的代码来测试你的题解:

// int[] nums = [...]; // 输入数组
// int[] expectedNums = [...]; // 长度正确的期望答案

// int k = removeDuplicates(nums); // 调用

// assert k == expectedNums.length;
// for (int i = 0; i < k; i++) {
//     assert nums[i] == expectedNums[i];
// }
// 如果所有断言都通过，那么您的题解将被 通过。

 

// 示例 1：

// 输入：nums = [1,1,2]
// 输出：2, nums = [1,2,_]
// 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
// 示例 2：

// 输入：nums = [0,0,1,1,1,2,2,3,3,4]
// 输出：5, nums = [0,1,2,3,4]
// 解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
 

// 提示：

// 0 <= nums.length <= 3 * 104
// -104 <= nums[i] <= 104
// nums 已按 升序 排列

// 原理
// 1. 定义一个慢指针P1指向第一个值，快指针p2指向第二个元素
// 2. 当p2小于数组长度的时候，进行遍历
// 3. 如果p1指向的元素不等于p2指向的元素，将慢指针p1向右移动一位，同时将p1指向的元素替换成p2指向的元素
// 4. 如果p1指向的元素等于p2指向的元素，就将快指针p2向右移动一位
// 5. 直到遍历完，返回p1+1。因为最初 i 等于 0 时的数字未统计，所以最终返回结果需要 +1
function removeDuplityEle(nums){
    let p1 = 0, p2 = 1;
    while(p2 < nums.length){
        if(nums[p1] !== nums[p2]){
            p1++
            nums[p1] = nums[p2]
        }
        p2++
    }
    return p1+1;
}
let arr = [0,1,1,2,3,3] // [0,1,2,3,4]
console.log(removeDuplityEle(arr))